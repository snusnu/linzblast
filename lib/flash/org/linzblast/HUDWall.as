package {    import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.Loader;	import flash.ui.Mouse;	import flash.net.*;	import flash.events.*;		// as3corelib json inlcude	import com.adobe.serialization.json.*; 		public class HUDWall extends Sprite {	  	  // game elements	  private var gameStage:Game            = null;	  private var wallSelector:WallSelector = null;	  private var gui:HudWallDisplay        = null;	  	  private var _images:Object;	  	  // metadata	  private var _currentWallData     = null;	  	  	  public function HUDWall(gameStage:Game) {	    this.gameStage    = gameStage;      this.wallSelector = new WallSelector(this.gameStage, this);      this.gui          = new HudWallDisplay();            this._images      = new Object();            initializeGui();		}						// called by wallSelector event listener		public function set currentWallData(currentWallData) {		  this._currentWallData = currentWallData;		}				public function get currentWallData() {		  return this._currentWallData;		}						private function initializeGui() {		  addChild(gui);      gui.x = gameStage.stage.stageWidth - gui.width -20;      gui.y = gameStage.stage.stageHeight - gui.height - 20;      gui.addEventListener(MouseEvent.CLICK, showWallSelector);      this.gameStage.wallSelector = wallSelector;      loadImages();		}				private function showWallSelector(event:Event) {		  this.wallSelector.show();		}						// TODO finish image caching				private function loadImages():void {		  for(var entry:Object in gameStage.stylesData) {			  loadImage(gameStage.stylesData[entry].symbol_image_url)			}		}				private function loadImage(imageUrl):void {			var loader:Loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageHandler);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, imageHandler);			loader.load(new URLRequest(imageUrl));		}				private function imageHandler(event:*):void {			event.currentTarget.removeEventListener(Event.COMPLETE, imageHandler);			event.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, imageHandler);			if (event is IOErrorEvent) {				trace("could not load image");			} else {				var image:Loader = event.currentTarget.loader;				var imageUrl = event.currentTarget.loader.contentLoaderInfo.url;				addImage(image, associatedImageData(imageUrl));			}		}				private function addImage(image:DisplayObject, associatedData):void {		  var data = new BitmapData(image.width, image.height, true, 0x00FFFFFF);			data.draw(image);			var bmp:Bitmap = new Bitmap(data, "auto", true);			bmp.x -= bmp.width * .5;			bmp.y -= bmp.height * .5;						_images[associatedData.symbol_image_url] = bmp;						//addChild(bmp);					}				// images are loaded asynchronously that's why we need all this		private function associatedImageData(imageUrl) {		  		  var associatedData = null;		  		  for(var entry:Object in gameStage.stylesData) {		    		    var styleData = gameStage.stylesData[entry];		    var segments = styleData.symbol_image_url.split('/');		    var imageName = segments[segments.length - 1].split('?')[0];		            if (imageUrl.indexOf(imageName) > -1) {			    associatedData = styleData;			  }			  			}		  		  return associatedData;		}		  }}